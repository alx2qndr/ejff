#pragma once

#include <memory>

#include <SDL3/SDL.h>

namespace ejff::gpu
{

class Device;

struct SDL_GPUTextureDeleter
{
    SDL_GPUDevice *device;

    SDL_GPUTextureDeleter(SDL_GPUDevice *device = nullptr) : device(device) {}

    void operator()(SDL_GPUTexture *texture) const noexcept
    {
        if (texture)
        {
            SDL_ReleaseGPUTexture(device, texture);
        }
    }
};

class Texture
{
public:
    Texture() = default;

    explicit Texture(Device &device, SDL_GPUTextureType type,
                     SDL_GPUTextureFormat format,
                     SDL_GPUTextureUsageFlags usage, uint32_t width,
                     uint32_t height, uint32_t layerCountOrDepth,
                     uint32_t numLevels, SDL_GPUSampleCount sampleCount);

    Texture(const Texture &) = delete;
    Texture &operator=(const Texture &) = delete;

    Texture(Texture &&) noexcept = default;
    Texture &operator=(Texture &&) noexcept = default;

    ~Texture() = default;

    SDL_GPUTexture *get() const noexcept { return ptr_.get(); }

    enum class Format : uint32_t
    {
        eInvalid = SDL_GPU_TEXTUREFORMAT_INVALID,

        eA8_UNorm = SDL_GPU_TEXTUREFORMAT_A8_UNORM,
        eR8_UNorm = SDL_GPU_TEXTUREFORMAT_R8_UNORM,
        eR8G8_UNorm = SDL_GPU_TEXTUREFORMAT_R8G8_UNORM,
        eR8G8B8A8_UNorm = SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM,
        eR16_UNorm = SDL_GPU_TEXTUREFORMAT_R16_UNORM,
        eR16G16_UNorm = SDL_GPU_TEXTUREFORMAT_R16G16_UNORM,
        eR16G16B16A16_UNorm = SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM,
        eR10G10B10A2_UNorm = SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM,
        eB5G6R5_UNorm = SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM,
        eB5G5R5A1_UNorm = SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM,
        eB4G4R4A4_UNorm = SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM,
        eB8G8R8A8_UNorm = SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM,

        eBC1_RGBA_UNorm = SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM,
        eBC2_RGBA_UNorm = SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM,
        eBC3_RGBA_UNorm = SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM,
        eBC4_R_UNorm = SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM,
        eBC5_RG_UNorm = SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM,
        eBC7_RGBA_UNorm = SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM,

        eBC6H_RGB_Float = SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT,

        eBC6H_RGB_UFloat = SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT,

        eR8_SNorm = SDL_GPU_TEXTUREFORMAT_R8_SNORM,
        eR8G8_SNorm = SDL_GPU_TEXTUREFORMAT_R8G8_SNORM,
        eR8G8B8A8_SNorm = SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM,
        eR16_SNorm = SDL_GPU_TEXTUREFORMAT_R16_SNORM,
        eR16G16_SNorm = SDL_GPU_TEXTUREFORMAT_R16G16_SNORM,
        eR16G16B16A16_SNorm = SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM,

        eR16_Float = SDL_GPU_TEXTUREFORMAT_R16_FLOAT,
        eR16G16_Float = SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT,
        eR16G16B16A16_Float = SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT,
        eR32_Float = SDL_GPU_TEXTUREFORMAT_R32_FLOAT,
        eR32G32_Float = SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT,
        eR32G32B32A32_Float = SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT,

        eR11G11B10_UFloat = SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT,

        eR8_UInt = SDL_GPU_TEXTUREFORMAT_R8_UINT,
        eR8G8_UInt = SDL_GPU_TEXTUREFORMAT_R8G8_UINT,
        eR8G8B8A8_UInt = SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT,
        eR16_UInt = SDL_GPU_TEXTUREFORMAT_R16_UINT,
        eR16G16_UInt = SDL_GPU_TEXTUREFORMAT_R16G16_UINT,
        eR16G16B16A16_UInt = SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT,
        eR32_UInt = SDL_GPU_TEXTUREFORMAT_R32_UINT,
        eR32G32_UInt = SDL_GPU_TEXTUREFORMAT_R32G32_UINT,
        eR32G32B32A32_UInt = SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT,

        eR8_Int = SDL_GPU_TEXTUREFORMAT_R8_INT,
        eR8G8_Int = SDL_GPU_TEXTUREFORMAT_R8G8_INT,
        eR8G8B8A8_Int = SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT,
        eR16_Int = SDL_GPU_TEXTUREFORMAT_R16_INT,
        eR16G16_Int = SDL_GPU_TEXTUREFORMAT_R16G16_INT,
        eR16G16B16A16_Int = SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT,
        eR32_Int = SDL_GPU_TEXTUREFORMAT_R32_INT,
        eR32G32_Int = SDL_GPU_TEXTUREFORMAT_R32G32_INT,
        eR32G32B32A32_Int = SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT,

        eR8G8B8A8_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB,
        eB8G8R8A8_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB,
        eBC1_RGBA_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB,
        eBC2_RGBA_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB,
        eBC3_RGBA_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB,
        eBC7_RGBA_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB,

        eD16_UNorm = SDL_GPU_TEXTUREFORMAT_D16_UNORM,
        eD24_UNorm = SDL_GPU_TEXTUREFORMAT_D24_UNORM,
        eD32_Float = SDL_GPU_TEXTUREFORMAT_D32_FLOAT,
        eD24_UNorm_S8_UInt = SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT,
        eD32_Float_S8_UInt = SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT,

        eASTC_4x4_UNorm = SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM,
        eASTC_5x4_UNorm = SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM,
        eASTC_5x5_UNorm = SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM,
        eASTC_6x5_UNorm = SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM,
        eASTC_6x6_UNorm = SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM,
        eASTC_8x5_UNorm = SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM,
        eASTC_8x6_UNorm = SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM,
        eASTC_8x8_UNorm = SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM,
        eASTC_10x5_UNorm = SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM,
        eASTC_10x6_UNorm = SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM,
        eASTC_10x8_UNorm = SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM,
        eASTC_10x10_UNorm = SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM,
        eASTC_12x10_UNorm = SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM,
        eASTC_12x12_UNorm = SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM,

        eASTC_4x4_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM_SRGB,
        eASTC_5x4_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM_SRGB,
        eASTC_5x5_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM_SRGB,
        eASTC_6x5_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM_SRGB,
        eASTC_6x6_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM_SRGB,
        eASTC_8x5_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM_SRGB,
        eASTC_8x6_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM_SRGB,
        eASTC_8x8_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM_SRGB,
        eASTC_10x5_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM_SRGB,
        eASTC_10x6_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM_SRGB,
        eASTC_10x8_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM_SRGB,
        eASTC_10x10_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM_SRGB,
        eASTC_12x10_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM_SRGB,
        eASTC_12x12_UNorm_SRGB = SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM_SRGB,

        eASTC_4x4_Float = SDL_GPU_TEXTUREFORMAT_ASTC_4x4_FLOAT,
        eASTC_5x4_Float = SDL_GPU_TEXTUREFORMAT_ASTC_5x4_FLOAT,
        eASTC_5x5_Float = SDL_GPU_TEXTUREFORMAT_ASTC_5x5_FLOAT,
        eASTC_6x5_Float = SDL_GPU_TEXTUREFORMAT_ASTC_6x5_FLOAT,
        eASTC_6x6_Float = SDL_GPU_TEXTUREFORMAT_ASTC_6x6_FLOAT,
        eASTC_8x5_Float = SDL_GPU_TEXTUREFORMAT_ASTC_8x5_FLOAT,
        eASTC_8x6_Float = SDL_GPU_TEXTUREFORMAT_ASTC_8x6_FLOAT,
        eASTC_8x8_Float = SDL_GPU_TEXTUREFORMAT_ASTC_8x8_FLOAT,
        eASTC_10x5_Float = SDL_GPU_TEXTUREFORMAT_ASTC_10x5_FLOAT,
        eASTC_10x6_Float = SDL_GPU_TEXTUREFORMAT_ASTC_10x6_FLOAT,
        eASTC_10x8_Float = SDL_GPU_TEXTUREFORMAT_ASTC_10x8_FLOAT,
        eASTC_10x10_Float = SDL_GPU_TEXTUREFORMAT_ASTC_10x10_FLOAT,
        eASTC_12x10_Float = SDL_GPU_TEXTUREFORMAT_ASTC_12x10_FLOAT,
        eASTC_12x12_Float = SDL_GPU_TEXTUREFORMAT_ASTC_12x12_FLOAT
    };

private:
    SDL_GPUTexture *create(Device &device, SDL_GPUTextureType type,
                           SDL_GPUTextureFormat format,
                           SDL_GPUTextureUsageFlags usage, uint32_t width,
                           uint32_t height, uint32_t layerCountOrDepth,
                           uint32_t numLevels, SDL_GPUSampleCount sampleCount);

    std::unique_ptr<SDL_GPUTexture, SDL_GPUTextureDeleter> ptr_{nullptr};
};

} // namespace ejff::gpu
